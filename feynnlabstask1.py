# -*- coding: utf-8 -*-
"""FeynnLabsTask1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fehtd5fCyWTA07aKlQz_63BvwSXKz__7

**Importing Libraries**
"""

import numpy as np
import pandas as pd
import matplotlib
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import accuracy_score, confusion_matrix,roc_auc_score
from sklearn import metrics
import warnings
warnings.filterwarnings('ignore')

import io
from google.colab import files

"""**Loading the dataset**"""

uploaded = files.upload()

df = pd.read_csv(io.BytesIO(uploaded.get('heart_failure_clinical_records_dataset.csv')))

df

pd.pandas.set_option('Display.max_columns',None)
pd.pandas.set_option('Display.max_rows',None)

"""**Data Cleansing and Exploratory Data Analysis**"""

# first five record of the dataset
df.head()

# last five record of the dataset
df.tail()

# shape of the dataset
df.shape

# features of the dataset
df.columns

df['anaemia'].value_counts()

df['diabetes'].value_counts()

df['high_blood_pressure'].value_counts()

df['sex'].value_counts()

df['smoking'].value_counts()

df['DEATH_EVENT'].value_counts()

# information about the dataset
df.info()

df.dtypes

# summary  statistics of the dataset
df.describe()

# check null values
df.isnull().sum()

df.duplicated().sum()

plt.figure(figsize=(10,6))
plt.hist(df['age'],color='lime')
plt.xlabel("x-axis")
plt.ylabel("y-axis")
plt.title("Distribution of the feature, age")

plt.figure(figsize=(10,6))
plt.hist(df['creatinine_phosphokinase'],color='purple')
plt.xlabel("x-axis")
plt.ylabel("y-axis")
plt.title("Distribution of the feature, creatinine_phosphokinase")

plt.figure(figsize=(10,6))
plt.hist(df['ejection_fraction'],color='lightcoral')
plt.xlabel("x-axis")
plt.ylabel("y-axis")
plt.title("Distribution of the feature, ejection_frantion")

plt.figure(figsize=(10,6))
plt.hist(df['high_blood_pressure'],color='darkcyan')
plt.xlabel("x-axis")
plt.ylabel("y-axis")
plt.title("Distribution of the feature, high_blood_pressure")

plt.figure(figsize=(10,6))
plt.hist(df['platelets'],color='cyan')
plt.xlabel("x-axis")
plt.ylabel("y-axis")
plt.title("Distribution of the feature, platelets")

plt.figure(figsize=(10,6))
plt.hist(df['serum_creatinine'],color='yellow')
plt.xlabel("x-axis")
plt.ylabel("y-axis")
plt.title("Distribution of the feature, serum_creatinine")

plt.figure(figsize=(10,6))
plt.hist(df['serum_sodium'],color='powderblue')
plt.xlabel("x-axis")
plt.ylabel("y-axis")
plt.title("Distribution of the feature, serum_sodium")

plt.figure(figsize=(10,6))
plt.hist(df['time'],color='pink')
plt.xlabel("x-axis")
plt.ylabel("y-axis")
plt.title("Distribution of the feature, time")

bloodPressure = df['high_blood_pressure'].value_counts()
plt.figure(figsize=(10,6))
plt.bar(bloodPressure.index,bloodPressure.values,color='darkcyan')
plt.xlabel("x-axis")
plt.ylabel("y-axis")
plt.title("Distribution of the feature, blood_pressure")

deathEvent = df['DEATH_EVENT'].value_counts()
plt.figure(figsize=(10,6))
plt.bar(deathEvent.index,deathEvent.values,color='hotpink')
plt.xlabel("x-axis")
plt.ylabel("y-axis")
plt.title("Distribution of the feature, DEATH_EVENT")

## Correlation between the features
matplotlib.rcParams['figure.figsize'] = (15,8)
sns.heatmap(df.corr(),cmap = 'YlGnBu', annot = True)
plt.show()

sns.set_style('whitegrid')
sns.pairplot(df,hue='DEATH_EVENT')
plt.show()

"""**Split the dataset**"""

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(df.drop(labels=['DEATH_EVENT'],axis=1),df['DEATH_EVENT'],
                                                                                        test_size=0.2,random_state=0)

"""
**System training and Classification using Logistic Regression**"""

from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression(random_state = 0)
classifier.fit(x_train, y_train)

pred = classifier.predict(x_test)
y_train_predict = classifier.predict(x_train)

print("Training Accuracy", accuracy_score(y_train, y_train_predict))
Accuracy = metrics.accuracy_score(y_test, pred)
print("Testing Accuracy", Accuracy)

from sklearn.metrics import classification_report
print(classification_report(y_test, pred))
pd.crosstab(y_test, pred)

print(confusion_matrix(y_test,pred))

"""**System training and Classification using KNN**"""

#Fitting K-NN classifier to the training set
from sklearn.neighbors import KNeighborsClassifier
classifier= KNeighborsClassifier()
classifier.fit(x_train, y_train)

pred = classifier.predict(x_test)
y_train_predict = classifier.predict(x_train)

print("Training Accuracy", accuracy_score(y_train, y_train_predict))
Accuracy = metrics.accuracy_score(y_test, pred)
print("Testing Accuracy", Accuracy)

from sklearn.metrics import classification_report
print(classification_report(y_test, pred))
pd.crosstab(y_test, pred)

print(confusion_matrix(y_test,pred))

"""**System training and Classification using Random Forest**"""

from sklearn.ensemble import RandomForestClassifier

# creating a RF classifier
from sklearn.ensemble import RandomForestClassifier
classifier = RandomForestClassifier()
classifier.fit(x_train, y_train)

pred = classifier.predict(x_test)
y_train_predict = classifier.predict(x_train)

print("Training Accuracy", accuracy_score(y_train, y_train_predict))
Accuracy = metrics.accuracy_score(y_test, pred)
print("Testing Accuracy", Accuracy)

from sklearn.metrics import classification_report
print(classification_report(y_test, pred))
pd.crosstab(y_test, pred)

print(confusion_matrix(y_test,pred))

"""**System training and Classification using XGBoost**"""

import xgboost as xgb
classifier = xgb.XGBClassifier()
classifier.fit(x_train, y_train)

pred = classifier.predict(x_test)
y_train_predict = classifier.predict(x_train)

print("Training Accuracy", accuracy_score(y_train, y_train_predict))
Accuracy = metrics.accuracy_score(y_test, pred)
print("Testing Accuracy",Accuracy)

from sklearn.metrics import classification_report
print(classification_report(y_test, pred))
pd.crosstab(y_test, pred)

print(confusion_matrix(y_test,pred))

"""**System training and Classification using AdaBoost**"""

from sklearn.ensemble import AdaBoostClassifier
classifier = AdaBoostClassifier()
classifier.fit(x_train, y_train)

pred = classifier.predict(x_test)
y_train_predict = classifier.predict(x_train)

print("Training Accuracy", accuracy_score(y_train, y_train_predict))
Accuracy = metrics.accuracy_score(y_test, pred)
print("Testing Accuracy",Accuracy)

from sklearn.metrics import classification_report
print(classification_report(y_test, pred))
pd.crosstab(y_test, pred)

print(confusion_matrix(y_test,pred))

